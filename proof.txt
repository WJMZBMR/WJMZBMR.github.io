We use round reduction. We will show that if ther exists an algorithm satisfying:
k rounds
p success probability
(approx) qn one's
n input size
We call such an algorithm a (k, p, qn, n)-algorithm

then there exists an algorithm satisfying:
k-1 rounds
p - 1/n^1/3 success probability
(approx) qn one's
n - n^2/3 input size

Note that this implies a n^1/3 lower bound, since a (n^(1/3 - eps), 2/3, 1/3, n) algorithm implies a (n^(1/3 - eps) - r, 2/3 - r/n^(1/3), qn, n - rn^(2/3)) algorithm. Now set r = n^(1/3 - eps) and you get a 0 round algorithm for solving a nontrivial problem.


So now, the proof for the round reduction. Consider the first query of the (k, p, qn, n) algorithm. Call all indices which it queries with probability at least n^(-2/3) "heavy", and the others "light". Put a 0 in all of the heavy indices. There are at most n^(2/3) heavy indices, so we are effectively reducing our input size by n^(2/3).

Now, instead of running the first step, we instead "simulate" running it in our heads (without ever looking at the input), guessing the output of the simulated query. Each index is chosen with probability at most n^(-2/3) (because all remaining indices are "light"). We know the sensitivity of the output is at most n^(1/3) (otherwise we just trivially get the result), so the probability our simulation queries a sensitive bit is at most n^(-1/3) (because probability n^(-2/3) for each of the n^(1/3) sensitive bits). In the case where we don't query a sensitive bit, it doesn't matter what our simulation decided it will be, since the algorithm will output the same index either way. 